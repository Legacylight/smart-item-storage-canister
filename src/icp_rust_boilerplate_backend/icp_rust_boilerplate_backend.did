type ChangeRecord = record { change_type : text; timestamp : nat64 };
type Error = variant { NotFound : record { msg : text } };
type ItemStatistics = record {
  total_items : nat64;
  average_availability_rate : float64;
};
type Query = variant { GetItem : nat64 };
type QueryResult = variant { Error : Error; Item : SmartStorageItem };
type Result = variant { Ok : SmartStorageItem; Err : Error };
type Result_1 = variant { Ok : bool; Err : Error };
type SmartStorageItem = record {
  id : nat64;
  updated_at : opt nat64;
  name : text;
  description : text;
  created_at : nat64;
  is_available : bool;
  location : text;
};
type SmartStorageItemPayload = record {
  name : text;
  description : text;
  is_available : bool;
  location : text;
};
type TransactionRecord = record {
  transaction_type : text;
  change_type : text;
  timestamp : nat64;
};
service : {
  add_smart_storage_item : (SmartStorageItemPayload) -> (opt SmartStorageItem);
  batch_query : (vec Query) -> (vec QueryResult) query;
  bulk_update_smart_storage_items : (
      vec record { nat64; SmartStorageItemPayload },
    ) -> (vec Result);
  delete_smart_storage_item : (nat64) -> (Result);
  get_all_smart_storage_items : () -> (vec SmartStorageItem) query;
  get_available_smart_storage_items : () -> (vec SmartStorageItem) query;
  get_item_history : (nat64) -> (vec ChangeRecord) query;
  get_item_statistics : () -> (ItemStatistics) query;
  get_item_transaction_history : (nat64) -> (vec TransactionRecord) query;
  get_paginated_smart_storage_items : (nat64, nat64) -> (
      vec SmartStorageItem,
    ) query;
  get_smart_storage_item : (nat64) -> (Result) query;
  is_item_available : (nat64) -> (Result_1) query;
  mark_item_as_available : (nat64) -> (Result);
  mark_item_as_unavailable : (nat64) -> (Result);
  search_smart_storage_items : (text) -> (vec SmartStorageItem) query;
  sort_items_by_name : () -> (vec SmartStorageItem) query;
  update_smart_storage_item : (nat64, SmartStorageItemPayload) -> (Result);
}
